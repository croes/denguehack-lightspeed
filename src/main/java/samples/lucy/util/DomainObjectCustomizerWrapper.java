/*
 *
 * Copyright (c) 1999-2016 Luciad All Rights Reserved.
 *
 * Luciad grants you ("Licensee") a non-exclusive, royalty free, license to use,
 * modify and redistribute this software in source and binary code form,
 * provided that i) this copyright notice and license appear on all copies of
 * the software; and ii) Licensee does not utilize the software in a manner
 * which is disparaging to Luciad.
 *
 * This software is provided "AS IS," without a warranty of any kind. ALL
 * EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING ANY
 * IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
 * NON-INFRINGEMENT, ARE HEREBY EXCLUDED. LUCIAD AND ITS LICENSORS SHALL NOT BE
 * LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING
 * OR DISTRIBUTING THE SOFTWARE OR ITS DERIVATIVES. IN NO EVENT WILL LUCIAD OR ITS
 * LICENSORS BE LIABLE FOR ANY LOST REVENUE, PROFIT OR DATA, OR FOR DIRECT,
 * INDIRECT, SPECIAL, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER
 * CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF THE USE OF
 * OR INABILITY TO USE SOFTWARE, EVEN IF LUCIAD HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES.
 */
package samples.lucy.util;

import static com.luciad.util.concurrent.TLcdLockUtil.*;

import java.awt.BorderLayout;
import java.awt.Component;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import com.luciad.gui.ILcdUndoableListener;
import com.luciad.gui.TLcdUndoableEvent;
import samples.lucy.undo.ModelElementChangedUndoable;
import com.luciad.lucy.gui.customizer.ALcyDomainObjectCustomizerPanel;
import com.luciad.lucy.gui.customizer.ILcyCustomizerPanel;
import com.luciad.lucy.util.context.TLcyDomainObjectContext;
import com.luciad.model.ILcdModel;
import com.luciad.util.ILcdFilter;

/**
 * This wrapper notifies the model that the domain object changed when the wrapped customizer
 * changes the domain object, and makes the wrapped customizer update when the domain object is changed
 * from outside of this customizer. It also takes all the necessary write and read locks on the
 * model.
 *
 * It also does this for the undoables generated by the wrapped customizer panel.
 */
public class DomainObjectCustomizerWrapper extends ALcyDomainObjectCustomizerPanel {
  private final ILcyCustomizerPanel fDelegateCustomizerPanel;

  public DomainObjectCustomizerWrapper(ILcdFilter aDomainObjectContextFilter, ILcyCustomizerPanel aDelegateCustomizerPanel) {
    super(aDomainObjectContextFilter, (String) aDelegateCustomizerPanel.getValue(NAME));
    fDelegateCustomizerPanel = aDelegateCustomizerPanel;
    setLayout(new BorderLayout());
    add((Component) aDelegateCustomizerPanel, BorderLayout.CENTER);

    fDelegateCustomizerPanel.addPropertyChangeListener("changesPending", new PropertyChangeListener() {
      @Override
      public void propertyChange(PropertyChangeEvent evt) {
        if (Boolean.TRUE.equals(evt.getNewValue())) {
          setChangesPending(true);
        }
      }
    });

    fDelegateCustomizerPanel.addPropertyChangeListener(new PropertyChangeListener() {
      @Override
      public void propertyChange(PropertyChangeEvent evt) {
        if (!"changesPending".equals(evt.getPropertyName())) {
          firePropertyChange(evt.getPropertyName(), evt.getOldValue(), evt.getNewValue());
        }
      }
    });

    fDelegateCustomizerPanel.addUndoableListener(new ILcdUndoableListener() {
      @Override
      public void undoableHappened(TLcdUndoableEvent event) {
        TLcyDomainObjectContext context = (TLcyDomainObjectContext) fDelegateCustomizerPanel.getObject();
        fireUndoableHappened(new ModelElementChangedUndoable(event.getUndoable(), context.getDomainObject(), context.getLayer()));
      }
    });
  }

  @Override
  public boolean canSetObject(Object aObject) {
    return super.canSetObject(aObject) &&
           fDelegateCustomizerPanel.canSetObject(aObject);
  }

  @Override
  protected void updateCustomizerPanelFromObject(boolean aPanelEditable) {
    ILcdModel model = getModel();
    if (model != null) {
      try (Lock autoUnlock = readLock(model)) {
        fDelegateCustomizerPanel.setObject(getObject());
      }
    } else {
      fDelegateCustomizerPanel.setObject(null);
    }
  }

  @Override
  protected boolean applyChangesImpl() {
    //detect whether the shape customizer made changes to the shape, and if so,
    //notify the model of a changed domain object.
    boolean changesWerePending = fDelegateCustomizerPanel.isChangesPending();
    ILcdModel model = getModel();
    boolean success;
    try (Lock autoUnlock = writeLock(model)) {
      success = fDelegateCustomizerPanel.applyChanges();
    }
    if (changesWerePending && success) {
      // the outstanding changes were successfully applied to the shape,
      //notify the model that the complete drawing shape was modified.
      model.elementChanged(getDomainObject(), ILcdModel.FIRE_NOW);
    }
    return success;
  }
}
